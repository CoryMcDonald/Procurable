@model Procurable.Models.Request

@{
    ViewBag.Title = "Create";
}

<br />


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    <div class="row">

        <div class="form-horizontal">


            <h2>New Request</h2>
            <br />
            <div class="col-lg-4">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.RequestedFor, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.RequestedFor, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.RequestedFor, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-lg-8">

                @Html.Hidden("RequestItems")
                <label class="control-label col-md-2">Items</label>
                <div class="col-md-10 roundBox">
                    <table class="table" id="itemList">
                        <tr>

                            <th>
                                Name
                            </th>
                            <th>
                                Comments
                            </th>
                            <th>
                                URL
                            </th>
                            <th></th>
                        </tr> 
                    </table>
                </div>


            </div>
        </div>
        </div>
        <hr class="darkLine">
        <div class="row">
            <div class="col-md-8" style="padding-left: 0px">
                <h2 style="margin-top: 0px">Add Inventory Item</h2>
            </div>

            <div class="col-md-4 form-inline">
                
                    <input class="form-control" id="itemSearchBox" placeholder="Search Inventory">
                    <button type="button" id="searchButton" class="btn">
                        <span class="glyphicon glyphicon-search" aria-hidden="true"></span> Search
                    </button>
                
            </div>
        </div>

        <br />

        <div class="row">
            <table class="table" >
                <thead>
                    <tr>

                        <th>
                            Vendor Name
                        </th>
                        <th>
                            Name
                        </th>
                        <th>
                            Price
                        </th>
                        <th>
                            Comments
                        </th>
                        <th>
                            Part Number
                        </th>
                        <th>
                            Inventory Status
                        </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody id="inventoryList">
                    
                </tbody>

</table>

        </div>
        <hr class="darkLine">

        <div class="row">
            <div class="col-md-9" style="padding-left: 0px">
                <h2 style="margin-top: 0px">Custom Item</h2>
            </div>
        </div>
        <br />
        <div class="row">

            <div class="col-md-3">
                <input class="form-control" placeholder="Name" id="nameinput">
            </div>
            <div class="col-md-5"> 
                <input class="form-control" placeholder="Comments" id="commentsinput">
            </div>
            <div class="col-md-3">
                <input class="form-control" placeholder="Url" id="urlinput">
            </div>
            <div class="col-md-1">
                <button type="button" class="btn addNewRow">
                    <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> Add
                </button>
            </div>



        </div>

        <hr class="darkLine" />


        <div class="row">
            <div class="form-group">
                <div class="col-md-10">
                    <input type="submit" value="Submit" class="btn btn-default" />
                </div>
            </div>
        </div>


}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


<script>
    $(document).ready(function () {
        $("#itemList").trigger('update');
    });

    //DELETE ROWS

    $("#itemList").on("click", '.deleteRow', function () {
        var $killrow = $(this).parent('td').parent('tr');
        $killrow.addClass("danger");
        $killrow.fadeOut(300, function () {
            $(this).remove();
            $("#itemList").trigger('update');
        });

        
    });

    //ADD ROWS

    $("#inventoryList").on("click", ".addExistingRow", function () {
        var $parentRow = $(this).parent('td').parent('tr');
        $name = $parentRow.find(".inventoryName").html();
        $comment = $parentRow.find(".inventoryComment").html();
        $url = '';

        $('#itemList tr:last').after("<tr><td>" + $name + "</td><td>" + $comment + "</td><td>" + $url + "</td><td>"
             + "<button type='button' class='btn btn-xs deleteRow'>"
             + " <span class='glyphicon glyphicon-remove ' aria-hidden='true'></span> Remove"
             + "</button>"
             + "</td></tr>");

        $("#itemList").trigger('update');
       
    });

    $(".addNewRow").on("click", function () {
        $name = $("#nameinput").val();
        $comment = $("#commentsinput").val();
        $url = $("#urlinput").val();

     
        $('#itemList tr:last').after("<tr><td>" + $name + "</td><td>" + $comment + "</td><td>" + $url + "</td><td>"
            + "<button type='button' class='btn btn-xs deleteRow'>" 
            + " <span class='glyphicon glyphicon-remove ' aria-hidden='true'></span> Remove"
            + "</button>"
            + "</td></tr>");    

        $("#nameinput").val('');
        $("#commentsinput").val('');
        $("#urlinput").val('');

        $("#itemList").trigger('update');
    });

    //UPDATE JSON 

    $('#itemList').on('update', function () {
       
        var sourceData = $("#itemList").tableToJSON({ignoreColumns: [3] });

        $("#RequestItems").val(JSON.stringify(sourceData));
 
    });

    $("#itemSearchBox").keyup(function (event) {
        if (event.keyCode == 13) {
            $("#searchButton").click();
        }
    });
    //SEARCH INVENTORY
    $("#searchButton").on("click", function () {
        var $searchValue = $("#itemSearchBox").val();
        var $searchQuery = "/InventoryItems/RequestSearch?query=" + $searchValue;

        $("#inventoryList > tr").remove();

        $('#loading-image').bind('ajaxStart', function () {
            $(this).show();
        }).bind('ajaxStop', function () {
            $(this).hide();
        });

        $.ajax({
            url: $searchQuery,
            method: 'GET',
            headers: {
                Accept: "application/json"
            },
            success: function (result) {
                if (result.length > 0) {
                    $.each(result, function (index, value) {
                        $vendor = value.Vendor.Name;
                        $name = value.Name;
                        $price = value.Price;
                        $comment = value.Comments;
                        $part = value.PartNumber;
                        $status = value.StatusDisplay;


                        $('#inventoryList').append("<tr><td>" + $vendor + "</td><td class='inventoryName'>" + $name + "</td><td>" + $price + "</td><td class='inventoryComment'>" + $comment + "</td><td>" + $part + "</td><td>" + $status + "</td><td>"
                            + "<button type='button' class='btn btn-xs addExistingRow'>"
                            + " <span class='glyphicon glyphicon-plus' aria-hidden='true'></span> Add"
                            + "</button>"
                            + "</td></tr>");
                    });
                }
                else {
                    $('#inventoryList').append("<tr><td>No Results</td></tr>");
                }

            }
        });

        $("#itemSearchBox").val('');

    });






    //TABLE TO JSON - PLUG IN - YEAH BAD PRACTICE I KNOW!
    (function ($) {
        'use strict';

        $.fn.tableToJSON = function (opts) {

            // Set options
            var defaults = {
                ignoreColumns: [],
                onlyColumns: null,
                ignoreHiddenRows: true,
                ignoreEmptyRows: false,
                headings: null,
                allowHTML: false,
                includeRowId: false,
                textDataOverride: 'data-override',
                textExtractor: null
            };
            opts = $.extend(defaults, opts);

            var notNull = function (value) {
                return value !== undefined && value !== null;
            };

            var ignoredColumn = function (index) {
                if (notNull(opts.onlyColumns)) {
                    return $.inArray(index, opts.onlyColumns) === -1;
                }
                return $.inArray(index, opts.ignoreColumns) !== -1;
            };

            var arraysToHash = function (keys, values) {
                var result = {}, index = 0;
                $.each(values, function (i, value) {
                    // when ignoring columns, the header option still starts
                    // with the first defined column
                    if (index < keys.length && notNull(value)) {
                        result[keys[index]] = value;
                        index++;
                    }
                });
                return result;
            };

            var cellValues = function (cellIndex, cell, isHeader) {
                var $cell = $(cell),
                  // textExtractor
                  extractor = opts.textExtractor,
                  override = $cell.attr(opts.textDataOverride);
                // don't use extractor for header cells
                if (extractor === null || isHeader) {
                    return $.trim(override || (opts.allowHTML ? $cell.html() : cell.textContent || $cell.text()) || '');
                } else {
                    // overall extractor function
                    if ($.isFunction(extractor)) {
                        return $.trim(override || extractor(cellIndex, $cell));
                    } else if (typeof extractor === 'object' && $.isFunction(extractor[cellIndex])) {
                        return $.trim(override || extractor[cellIndex](cellIndex, $cell));
                    }
                }
                // fallback
                return $.trim(override || (opts.allowHTML ? $cell.html() : cell.textContent || $cell.text()) || '');
            };

            var rowValues = function (row, isHeader) {
                var result = [];
                var includeRowId = opts.includeRowId;
                var useRowId = (typeof includeRowId === 'boolean') ? includeRowId : (typeof includeRowId === 'string') ? true : false;
                var rowIdName = (typeof includeRowId === 'string') === true ? includeRowId : 'rowId';
                if (useRowId) {
                    if (typeof $(row).attr('id') === 'undefined') {
                        result.push(rowIdName);
                    }
                }
                $(row).children('td,th').each(function (cellIndex, cell) {
                    result.push(cellValues(cellIndex, cell, isHeader));
                });
                return result;
            };

            var getHeadings = function (table) {
                var firstRow = table.find('tr:first').first();
                return notNull(opts.headings) ? opts.headings : rowValues(firstRow, true);
            };

            var construct = function (table, headings) {
                var i, j, len, len2, txt, $row, $cell,
                  tmpArray = [], cellIndex = 0, result = [];
                table.children('tbody,*').children('tr').each(function (rowIndex, row) {
                    if (rowIndex > 0 || notNull(opts.headings)) {
                        var includeRowId = opts.includeRowId;
                        var useRowId = (typeof includeRowId === 'boolean') ? includeRowId : (typeof includeRowId === 'string') ? true : false;

                        $row = $(row);

                        var isEmpty = ($row.find('td').length === $row.find('td:empty').length) ? true : false;

                        if (($row.is(':visible') || !opts.ignoreHiddenRows) && (!isEmpty || !opts.ignoreEmptyRows) && (!$row.data('ignore') || $row.data('ignore') === 'false')) {
                            cellIndex = 0;
                            if (!tmpArray[rowIndex]) {
                                tmpArray[rowIndex] = [];
                            }
                            if (useRowId) {
                                cellIndex = cellIndex + 1;
                                if (typeof $row.attr('id') !== 'undefined') {
                                    tmpArray[rowIndex].push($row.attr('id'));
                                } else {
                                    tmpArray[rowIndex].push('');
                                }
                            }

                            $row.children().each(function () {
                                $cell = $(this);
                                // skip column if already defined
                                while (tmpArray[rowIndex][cellIndex]) { cellIndex++; }

                                // process rowspans
                                if ($cell.filter('[rowspan]').length) {
                                    len = parseInt($cell.attr('rowspan'), 10) - 1;
                                    txt = cellValues(cellIndex, $cell);
                                    for (i = 1; i <= len; i++) {
                                        if (!tmpArray[rowIndex + i]) { tmpArray[rowIndex + i] = []; }
                                        tmpArray[rowIndex + i][cellIndex] = txt;
                                    }
                                }
                                // process colspans
                                if ($cell.filter('[colspan]').length) {
                                    len = parseInt($cell.attr('colspan'), 10) - 1;
                                    txt = cellValues(cellIndex, $cell);
                                    for (i = 1; i <= len; i++) {
                                        // cell has both col and row spans
                                        if ($cell.filter('[rowspan]').length) {
                                            len2 = parseInt($cell.attr('rowspan'), 10);
                                            for (j = 0; j < len2; j++) {
                                                tmpArray[rowIndex + j][cellIndex + i] = txt;
                                            }
                                        } else {
                                            tmpArray[rowIndex][cellIndex + i] = txt;
                                        }
                                    }
                                }

                                txt = tmpArray[rowIndex][cellIndex] || cellValues(cellIndex, $cell);
                                if (notNull(txt)) {
                                    tmpArray[rowIndex][cellIndex] = txt;
                                }
                                cellIndex++;
                            });
                        }
                    }
                });
                $.each(tmpArray, function (i, row) {
                    if (notNull(row)) {
                        // remove ignoredColumns / add onlyColumns
                        var newRow = notNull(opts.onlyColumns) || opts.ignoreColumns.length ?
                          $.grep(row, function (v, index) { return !ignoredColumn(index); }) : row,

                          // remove ignoredColumns / add onlyColumns if headings is not defined
                          newHeadings = notNull(opts.headings) ? headings :
                            $.grep(headings, function (v, index) { return !ignoredColumn(index); });

                        txt = arraysToHash(newHeadings, newRow);
                        result[result.length] = txt;
                    }
                });
                return result;
            };

            // Run
            var headings = getHeadings(this);
            return construct(this, headings);
        };
    })(jQuery);

    


</script>