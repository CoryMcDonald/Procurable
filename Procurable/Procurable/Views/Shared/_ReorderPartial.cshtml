
@model Procurable.Models.Reorder

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}




@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Reorder</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.InventoryItemName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.InventoryItemName, new { htmlAttributes = new { @class = "form-control", @Value = Request.Params["InventoryItemName"] ?? (Model == null ? "" : Model.InventoryItemName) } })
                @Html.ValidationMessageFor(model => model.InventoryItemName, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.QuanityToOrder, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.QuanityToOrder, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.QuanityToOrder, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ReorderThreshold, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ReorderThreshold, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ReorderThreshold, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ReorderFrequencyInDays, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10" id="bloodhound">
                @Html.TextBox("TimeSpanUnhidden", Model == null ? 0.ToHumanString() : Model.ReorderFrequencyInDays.ToHumanString(), new { @class = "form-control typeahead" })
                @Html.HiddenFor(m => m.ReorderFrequencyInDays, new { @class = "hiddenDays" })
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default pull-right btn-lg" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


<script>
    String.prototype.contains = function (it) { return this.indexOf(it) != -1; };

    $(document).ready(function () {
        var states = ["1 day", "2 days", "3 days", "4 days", "5 days", "6 days", "7 days", "8 days", "9 days", "10 days", "11 days", "12 days",
            "13 days", "14 days", "15 days", "16 days", "17 days", "18 days", "19 days", "20 days", "21 days", "22 days", "23 days", "24 days",
            "25 days", "26 days", "27 days", "28 days", "29 days", "1 month", "2 months", "3 months", "4 months", "5 months", "6 months", "7 months",
            "8 months", "9 months", "10 months", "11 months", "1 year"]
        var states = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.whitespace,
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            // `states` is an array of state names defined in "The Basics"
            local: states
        });

        $('#bloodhound .typeahead').typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        },
        {
            name: 'states',
            source: states
        });

        $('.typeahead').on('input propertychange paste typeahead:selected', function (item) {
            value = $("#TimeSpanUnhidden").val()

            values = value.split(' ')
            console.log(values)

            days = 0
            if (values.length > 1) {
                index = 0
                days = convertToDays(values, 1)
            }
            if (values.length > 3) {
                days += convertToDays(values, 3)
            }
            $('.hiddenDays').val(days)


        })
    })
    function convertToDays(values, index) {
        if (values[index].toUpperCase().contains('D')) {
            var pad = "0"
            days = pad.substring(0, pad.length - values[index - 1].length) + values[index - 1]
        } else if (values[index].toUpperCase().contains('M')) {
            days = parseInt(values[index - 1]) * 30.436875
        }
        return parseInt(days)
    }

</script>